#!/bin/bash
#
# Startup/shutdown script for the Passive Network Appliance (PNA).
# 
# This script can be used to start/stop the main PNA module, any
# additional real-time monitors needed (on-demand), and associated
# user-space helper routines.
#
# Configuration settings are in "config.pna" located in the config
# directory
# 
# No changes need to be made to this file.
#

SERVICE=pna
SCRIPT_DIR=$(dirname $(readlink -f $0))
CONFIG=$SCRIPT_DIR/../config/config.pna

# Load the configuration
if [ -e $CONFIG ] ; then
    source $CONFIG
else
    echo "Configuration file missing: $CONFIG" >&2
    exit 1
fi

# PNA programs
PNA_MODULE="$PNA_BASE/module/pna.ko"
USER_MESSAGE="$PNA_BASE/user/user_message"
LOAD_NETS="$PNA_BASE/user/load_nets"

# System programs
IFCONFIG="sudo /sbin/ifconfig"
SVC="sudo service"
TEE="sudo tee"
INSMOD="sudo /sbin/insmod"
RMMOD="sudo /sbin/rmmod -w"
LSMOD="/sbin/lsmod"

PNA_RUN="$PNA_BASE/run"

##
# Helper routine to set affinities on interface(s)
##
affinitize () {
    iface=$1
    # Find IRQs for iface
    IRQS=$(awk -F: '/'${iface}'[^\n]/{ print $1 }' /proc/interrupts)
    if [ -z "$IRQS" ] ; then
        IRQS=$(awk -F: '/'${iface}'/{ print $1 }' /proc/interrupts)
    fi
    NPROCS=${#PNA_SESSIONPROCS[@]}
    for irq in $IRQS ; do
        # XXX: Not a fan of this SESSIONPROCS mapping thing
        affinity=$((1 << ${PNA_SESSIONPROCS[$irq % $NPROCS]}))
        affinity=$(printf "%x" $affinity)
        name=$(basename /proc/irq/$irq/${iface}*)
        echo -e "\t$name ($irq) affinity $affinity"
        echo $affinity | $TEE /proc/irq/$irq/smp_affinity > /dev/null
    done
}

##
# Check for and disable any known conflicting services
##
conflicts () {
    action=$1
    $SVC irqbalance status > /dev/null 2>&1
    [ $? -eq 0 -o $? -eq 3 ] && $SVC irqbalance $action
}

##
# Simple routine to error out of the script
##
error () {
    echo
    echo "Error loading module and services ($1)"
    exit $1
}

ckfile () {
    if [ ! -f $1 ] ; then
        ret=$?
        echo "missing $1"
        error $ret
    fi
}

##
# Prepare and load the PNA module
##
start () {
    PARAMS=$*

    echo "Starting $SERVICE ..."

    ckfile $PNA_MODULE
    ckfile $USER_MESSAGE
    ckfile $LOAD_NETS

    # Bring up and set affinity on PNA interfaces
    for iface in ${PNA_IFACE/,/ } ; do
        # Check the device state first
        state=$(cat /sys/class/net/$iface/operstate 2> /dev/null)
        if [ $? -eq 1 ] ; then
            echo "There does not appear to be a $iface device"
            echo "Aborting"
            exit 4
        fi
        if [[ "$state" != "down" ]] ; then
            echo "$iface is NOT in the 'down' state ($state)."
            echo "Are you sure you want to intercept $iface traffic?"
            read -p "yes/[no]? " yn
            if [[ "$yn" != "yes" ]] ; then
                echo "Aborting (must type 'yes' to continue)"
                exit 5
            fi
        fi
        $IFCONFIG $iface up promisc
        affinitize $iface
    done

    # Disable conflicting services
    conflicts "stop"

    mkdir -p "$PNA_RUN"

    # Load the kernel module
    $INSMOD $PNA_MODULE pna_iface="$PNA_IFACE" $PNA_OPTIONS $PARAMS
    [ $? -eq 0 ] && touch "$PNA_RUN/$SERVICE.kmod" || error 6

    # Load up the networks to monitor
    $LOAD_NETS $PNA_NETS

    # Set up and start the user-space logging monitor(s)
    mkdir -p "$PNA_LOGDIR"
    ARGS="-v -d $PNA_LOGDIR"
    nohup ${USER_MESSAGE} $ARGS > user_message.log 2>&1 &
    PID=$!
    [ $? -eq 0 ] && echo $PID >> "$PNA_RUN/$SERVICE.pid"

    # Set processor affinity if desired
    if [ $PNA_MONPROCS ] ; then
        /bin/taskset -cp $PNA_MONPROCS $PID > /dev/null 2>&1
        affinity=$(/bin/taskset -p $PID | awk '{print $6}')
        echo -e "\tuser_message ($PID) affinity $affinity"
    fi

    # Record and log any useful data (as needed)
    date +%s.%N >> irq_count.start
    grep "\(${PNA_IFACE/,/\|}\)" /proc/interrupts >> irq_count.start

    echo "$SERVICE started successfully"
}

##
# Routine to bring down all the services for the PNA
##
stop () {
    echo "Stopping $SERVICE ..."

    # Conclude and logging of useful data
    date +%s.%N >> irq_count.stop
    grep "\(${PNA_IFACE/,/\|}\)" /proc/interrupts >> irq_count.stop

    # Take the user-space process
    [ -f "$PNA_RUN/$SERVICE.pid" ] && kill $(cat $PNA_RUN/$SERVICE.pid)
    rm -f "$PNA_RUN/$SERVICE.pid"

    # Determine if any rtmons are loaded (and unload them)
    RTMONS=$($LSMOD | grep "\<$SERVICE\>" | awk '{print $4}')
    for mon in ${RTMONS/,/ } ; do
        unload $mon
    done

    # Unload the main PNA module
    if [ -f "$PNA_RUN/$SERVICE.kmod" ] ; then
        $RMMOD $PNA_MODULE
        rm -f "$PNA_RUN/$SERVICE.kmod"
    fi

    # De-affinitize the interface(s) and take them down
    for iface in ${PNA_IFACE/,/ } ; do
        # unset CPU affinities
        for f in /proc/irq/*/$iface*/../smp_affinity ; do
            [ -f $f ] && cat /proc/irq/default_smp_affinity > $f
        done
        # Take down PNA interface
        $IFCONFIG $iface down
    done

    # Re-load any services that were stopped
    conflicts "start"

    echo "$SERVICE stopped successfully"
}

##
# Load a real-time monitor into the kernel.
##
load () {
    module=$1
    name=$(basename $module .ko)

    # Make sure the PNA module is loaded (error if not)
    [ -f "$PNA_RUN/$SERVICE.kmod" ] || error 3

    # Try to find the path for the monitor
    [ -f $module ] || module=$module.ko
    [ -f $module ] || module=monitors/$module
    [ -f $module ] || error 4

    # Insert the monitor
    $INSMOD $module
    [ $? -eq 0 ] && touch "$PNA_RUN/$name.kmod" || error 5
    echo "PNA monitor $name loaded"
}

##
# Unload a real-time monitor from the kernel
##
unload () {
    module=$1
    name=$(basename $module .ko)
    [ -f "$PNA_RUN/$name.kmod" ] && $RMMOD $name
    echo "PNA monitor $name unloaded"
}

command=$1
shift 1
case $command in
    start)
        start $*
    ;;
    stop)
        stop
    ;;
    load)
        load $*
    ;;
    unload)
        unload $*
    ;;
    restart)
        stop
        start $*
    ;;
    status)
        RTMONS=$($LSMOD | grep "\<$SERVICE\>" | awk '{print $4}')
        [ $? -eq 0 ] || exit 1
        echo "PNA is loaded"
        for mon in ${RTMONS/,/ } ; do
            echo " \`- rtmon: $mon is loaded"
        done
        exit 0
    ;;
    *)
        echo $"Usage: $SERVICE {start|stop|restart|status|load|unload}"
        exit 3
esac
